<?xml version="1.0"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V5.0//EN" 
  "http://www.docbook.org/xml/5.0/dtd/docbook.dtd">

<chapter xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Quick Start</title>
  <section>
    <title>What is AMEEconnect?</title>
	  <para>AMEEconnect is a web-based API that gives you access to the data and capabilities of the AMEE platform. It allows you to store and retrieve many forms of consumption data over long periods, while simultaneously applying recognised carbon calculation models to determine the environmental consequences of that consumption.</para>
  </section>
  <section>
    <title>Getting Started</title>
    <para>
      The first step in using AMEEconnect is to sign up for an API key. You can get a free trial account
      at <ulink url="http://my.amee.com/signup"/>. Enter your details, and you will be emailed your new API key details.
    </para>
    <para>
      This API key will give you access to the AMEE staging platform (stage.amee.com). This platform is designed for
      you to use while you are developing and testing your application. However, the data on it is regularly 
      wiped, so once you decide your application is ready to go into production, you will need to
      change over to using the AMEE live platform (live.amee.com; service fees may apply).
    </para>
    <para>
      Throughout the following documentation, the examples will use the AMEE stage platform URL.
    </para>
  </section>
  <section>
    <title>Authentication</title>
    <para>
      Once you've got your key, you're ready to start talking to the API itself, and the first step is 
      authentication.
    </para>
    <para>
      AMEE uses <emphasis>HTTP Basic</emphasis> authentication. You simply provide your username and password with every 
      request, using the standard HTTP basic auth format. Most HTTP libraries will support this functionality; as an 
      example, the following code shows this process in Ruby:
    </para>
    <programlisting role='ruby'>
http = Net::HTTP.new @host, 443
http.use_ssl = true
req = Net::HTTP::Get.new @location
req.basic_auth @username, @password
http.request(req)
    </programlisting>
    <para>
      You should only use HTTP Basic authentication if you are connecting to AMEEconnect over a secure HTTPS connection. Using
      HTTPS is highly recommended, and all examples in this manual use it, but if you need to use HTTP, see <xref linkend='authenticated_sessions' />
      for how to do secure authentication over insecure connections.
    </para>
  </section>
  <section>
    <title>Content Types</title>
    <para>
      AMEEconnect supports two content types. Depending on which format you prefer to parse, you can choose either one. 
      The information is the same in both.
    </para>
    <table class='properties'>
      <tr>
        <th>Encoding</th>
        <th>MIME type</th>
      </tr>
      <tr>
        <td>XML</td>
        <td>application/xml</td>
      </tr>
      <tr>
        <td>JSON</td>
        <td>application/json</td>
      </tr>
    </table>
    <para>
      You should specify your desired content type in the <emphasis>Accept</emphasis> header in your HTTP request. For example:
    </para>
		<section role='tabbed'>
  		<section role='tab'>
  			<title>XML</title>
  			<section role='httprequest'>
  			  <programlisting role='header'>
GET /profiles HTTP/1.1
Accept: application/xml
Authorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ=
          </programlisting>
        </section>
  		</section>
  		<section role='tab'>
  			<title>JSON</title>
  			<section role='httprequest'>
  			  <programlisting role='header'>
GET /profiles HTTP/1.1
Accept: application/json
Authorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ=
          </programlisting>
        </section>
  		</section>
  	</section>
  </section>
  <section>
    <title>Create a Profile</title>
    <para>
      To do calculations with AMEEconnect, you will need to create a <emphasis>Profile</emphasis>. We'll get into more detail about profiles in <xref linkend='profiles'/>, but for now we'll just go ahead and create one.
    </para>
    <para>
      To do this, you need to POST to the /profiles path, with 'profile=true' in the body, like this:
    </para>
		<section role='tabbed'>
		  <section role='tab'>
  			<title>JSON</title>
  			<section role='httprequest'>
  			  <programlisting role='header'>
POST /profiles HTTP/1.1
Accept: application/json
Content-Type: application/x-www-form-urlencoded
Authorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ=
          </programlisting>
          <programlisting role='body'>
profile=true
          </programlisting>
        </section>
        <section role='httpresponse'>
          <programlisting role='header'>
HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8
          </programlisting>
  			  <programlisting role='json-body'><xi:include href='samples/json/post_profiles.js' parse="text"/></programlisting>
			  </section>
  		</section>
  		<section role='tab'>
  			<title>XML</title>
  			<section role='httprequest'>
  			  <programlisting role='header'>
POST /profiles HTTP/1.1
Accept: application/xml
Content-Type: application/x-www-form-urlencoded
Authorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ=
          </programlisting>
          <programlisting role='body'>
profile=true
          </programlisting>
        </section>
        <section role='httpresponse'>
          <programlisting role='header'>
HTTP/1.1 200 OK
Content-Type: application/xml; charset=UTF-8
          </programlisting>
          <programlisting role='xml-body'><xi:include href='samples/xml/post_profiles.xml' parse="text"/></programlisting>
        </section>
  		</section>
  	</section>
  	<para>
  	  The resulting XML or JSON contains a Profile object, which in turn has what's known in AMEEconnect as a UID. This is a unique string that identifies the profile (all entities in AMEEconnect actually have a UID, as you'll see later). If you're using XML, the XPath you want to get the UID from the response is <emphasis>//Profile/@uid</emphasis>.
	  </para>
  </section>
  <section>
    <title>Choose a Data Item</title>
    <para>
      The next step is to choose which calculation you actually want to do. <ulink url="http://discover.amee.com">AMEEdiscover</ulink> lists all the possible calculations available in AMEE, with rich searching and tagging functionality to make it easy to find what you want. By browsing the categories in AMEEdiscover, you can find the type of calculation you want to do, and then by looking at the Data Items tab, you can see the range of particular calculations that are possible in that category. Each category has a path, and each data item is identified by a set of drilldown choices. We need the UID of the data item we want to use, and we get this by doing a drilldown request. This request uses the path of the category and the drilldown choices you choose, which in this case specify a large diesel car.
    </para>
		<section role='tabbed'>
		  <section role='tab'>
  			<title>JSON</title>
  			<section role='httprequest'>
  			  <programlisting role='header'>
GET /data/transport/car/generic/drill?fuel=diesel&amp;size=large HTTP/1.1
Accept: application/json
Authorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ=
          </programlisting>
    		</section>
  			<section role='httpresponse'>
  			  <programlisting role='header'>
HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8
          </programlisting>
          <programlisting role='json-body'><xi:include href='samples/json/drill_3.js' parse="text"/></programlisting>
		    </section>
  		</section>
		  <section role='tab'>
  			<title>XML</title>
  			<section role='httprequest'>
  			  <programlisting role='header'>
GET /data/transport/car/generic/drill?fuel=diesel&amp;size=large HTTP/1.1
Accept: application/xml
Authorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ=
          </programlisting>
    		</section>
  			<section role='httpresponse'>
  			  <programlisting role='header'>
HTTP/1.1 200 OK
Content-Type: application/xml; charset=UTF-8
          </programlisting>
          <programlisting role='xml-body'><xi:include href='samples/xml/drill_3.xml' parse="text"/></programlisting>
		    </section>
  		</section>
		</section>
		<para>
		  The response contains a Choice node which contains the UID of the data item. We will need this to identify the exact
		  calculation in the next step. You can extract it using the XPath <emphasis>//Choices/Choice/Name/text()</emphasis>.
	  </para>
  </section>
  <section>
    <title>Do a Calculation</title>
  </section>
</chapter>