<?xml version="1.0"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V5.0//EN" 
  "http://www.docbook.org/xml/5.0/dtd/docbook.dtd"
[
<!ENTITY % sgml.features "IGNORE">
<!ENTITY % xml.features "INCLUDE">
<!ENTITY % dbcent PUBLIC "-//OASIS//ENTITIES DocBook Character Entities V4.5//EN" "/opt/local/share/xml/docbook/4.5/dbcentx.mod">
%dbcent;
]>

<section xmlns:xi="http://www.w3.org/2001/XInclude">
	<title>Batch Operations</title>
  <para>
    Multiple Profile Items can be set in a single HTTP request by using the Batch Update mechanism. 
    Batch updates are performed by sending an XML or JSON document to the profile root or profile
    category URL. If you send a POST request, new Profile Items will be created. If you send a 
    PUT, existing Profile Items will be updated. If sending to the profile root, any data in
    any category can be created or modified. When sending to a category, only items within that
    category can be created or modified. 
  </para>
	<section>
		<title>Create Multiple Profile Items</title>
		<para>
			Used to create multiple new profile items in a single HTTP request.
		</para>
		<table class='requestdetails'>
			<tr>					
				<td>URL</td>
				<td>https://{server}.amee.com/profiles/{profile_uid}[/{category_path}]</td>
			</tr>
			<tr>					
				<td>HTTP Method</td>
				<td>POST</td>
			</tr>
			<tr>					
				<td>Request Content-Type</td>
				<td>application/json or application/xml</td>
			</tr>
			<tr>
				<td>Response Content-Type</td>
				<td>application/json or application/xml</td>
			</tr>
			<tr>
				<td>Successful Response Code</td>
				<td>200 OK</td>
			</tr>
		</table>
		<para>
		  The request should include a JSON or XML-encoded body containing the values which should be set.
		  See the examples below for the exact structure. Compulsory and optional parameters are as discussed
		  in the section on creating individual profile items, but instead of putting the parameters in a form
		  encoded body, parameter names become hash keys or tag names in the JSON or XML. As for creating 
		  individual items, a dataItemUid is compulsory. Other parameters are optional.
	  </para>
		<para>
		  You do not need to tell the platform which category the items should be created in; it will infer this
		  from the specified dataItemUid. This means that items can be created across multiple categories at once.
	  </para>
	  <para>
      Creation is atomic: in the event of failure, an error code will be returned and none of the items will
      be created. If successful, the response will contain a list of the locations of the created items.
		</para>
		<section role='tabbed'>
		  <section role='tab'>
  			<title>Example</title>
  			<section role='httprequest'>
  			  <section role='header'>
POST /profiles/80EC1B49E2A9 HTTP/1.1
Accept: application/json
Content-Type: application/json
          </section>
          <section role='json-body'>
            <xi:include href='samples/json/batch_create_request.js' parse="text"/>
          </section>
        </section>
        <section role='httpresponse'>
          <section role='header'>
HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8
          </section>
  			  <section role='json-body'>
  			    <xi:include href='samples/json/batch_create.js' parse="text"/>
  			  </section>
			  </section>
  		</section>
  		<section role='tab'>
  			<title>XML</title>
  			<section role='httprequest'>
  			  <section role='header'>
POST /profiles/59586731F930 HTTP/1.1
Accept: application/xml
Content-Type: application/xml
          </section>
          <section role='xml-body'>
            <xi:include href='samples/xml/batch_create_request.xml' parse="text"/>
          </section>
        </section>
        <section role='httpresponse'>
          <section role='header'>
HTTP/1.1 200 OK
Content-Type: application/xml; charset=UTF-8
          </section>
          <section role='xml-body'>
            <xi:include href='samples/xml/batch_create.xml' parse="text"/>
          </section>
        </section>
  		</section>
  	</section>
	</section>
</section>