<?xml version="1.0"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V5.0//EN" 
  "http://www.docbook.org/xml/5.0/dtd/docbook.dtd"
[
<!ENTITY % sgml.features "IGNORE">
<!ENTITY % xml.features "INCLUDE">
<!ENTITY % dbcent PUBLIC "-//OASIS//ENTITIES DocBook Character Entities V4.5//EN" "/opt/local/share/xml/docbook/4.5/dbcentx.mod">
%dbcent;
]>

<section xmlns:xi="http://www.w3.org/2001/XInclude">
	<title>Data Categories</title>
  <para>
  </para>
	<section>
		<title>Properties</title>
		<table>
			<tr>
				<th>Property</th>
				<th>Description</th>
			</tr>
			<tr>					
				<td>UID</td>
				<td>A 12-letter unique identifier for the category. See Unique IDs for more information.</td>
			</tr>
			<tr>					
				<td>created</td>
				<td>The time and date on which the category was created.</td>
			</tr>
			<tr>					
				<td>modified</td>
				<td>The time and date on which the category was last modified. Note that this
				   does not track changes to items inside the category, only to the category itself.</td>
			</tr>
			<tr>					
				<td>name</td>
				<td>The display name for the category.</td>
			</tr>
			<tr>					
				<td>path</td>
				<td>The path of this Data Category. A path forms part of the URL.</td>
			</tr>
		</table>
	</section>
	<section>
		<title>Get Data Category</title>
		<para>
			Lists all subcategories and data items in a data category
		</para>
		<table class='requestdetails'>
			<tr><td>URL</td><td>https://{server}.amee.com/data[/{category_path}]</td></tr>
			<tr><td>HTTP Method</td><td>GET</td></tr>
			<tr><td>Response Content-Type</td><td>application/xml or application/json</td></tr>
			<tr><td>Successful Response Code</td><td>200 OK</td></tr>
		</table>
		<section>
		  <title>Optional Parameters</title>
  		<table class='parameters'>
  			<tr>
					<th>Parameter</th>
					<th>Description</th>
  			</tr>
				<tr>
					<td>page</td>
					<td>If there is more than one page of data items, retrieve the specified page. Default is 
					  to fetch page 1. See <xref linkend='paging'/>.</td>
				</tr>
				<tr>
					<td>itemsPerPage</td>
					<td>Specify the number of data items returned in a single page. Default is 
					  to fetch 10 items per page. See <xref linkend='paging'/>.</td>
				</tr>
  		</table>
	  </section>
		<para>
		  The response contains a JSON or XML encoded description of the data category. The result 
		  will contain descriptions of subcategories or data items if they exist inside the data
		  category.
	  </para>
		<section role='tabbed'>
		  <section role='tab'>
  			<title>JSON</title>
  			<section role='httprequest'>
  			  <programlisting role='header'>
GET /data/transport/car/generic HTTP/1.1
Accept: application/json
          </programlisting>
    		</section>
  			<section role='httpresponse'>
  			  <programlisting role='header'>
HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8
          </programlisting>
          <programlisting role='json-body'><xi:include href='samples/json/get_data_category.js' parse="text"/></programlisting>
		    </section>
  		</section>
		  <section role='tab'>
  			<title>XML</title>
  			<section role='httprequest'>
  			  <programlisting role='header'>
GET /data/transport/car/generic HTTP/1.1
Accept: application/xml
          </programlisting>
    		</section>
  			<section role='httpresponse'>
  			  <programlisting role='header'>
HTTP/1.1 200 OK
Content-Type: application/xml; charset=UTF-8
          </programlisting>
          <programlisting role='xml-body'><xi:include href='samples/xml/get_data_category.xml' parse="text"/></programlisting>
		    </section>
  		</section>
		</section>
	</section>
	<section id='drilldown_reference'>
		<title>Look up a Data Item UID</title>
    <para>
      Drilldowns are a special resource available within every Data Category that contains Data Items.
    </para>
    <para>
      As data items are identified by UIDs in API calls such as creating Profile Items, a way is 
      required of translating human-readable choices into these UIDs. This is particularly important 
      for large categories, such as UK car models, which can contain many thousands of data items.
    </para>
    <para>
      Data item UIDs may be different on different AMEE platforms for the same item. Because of
      this, data item UIDs should never be hardcoded into client apps. Instead, you should use the 
      drilldown URL (which doesn't change) to obtain the UIDs, which can then be cached. 
      Drilldown URLs may be safely hardcoded, so that you don't necessarily have to iterate through
      the choices each time if you already know which item you want to get to.
    </para>
		<para>
      Each call to the resource will give a list of choices. The API client can then select one of
      these and provide it as a parameter to the next drilldown call. When the sequence of choices
      uniquely identifies one data item, a single choice named 'uid' is returned. This is the UID 
      that should be used to refer to the chosen Data Item when creating Profile Items (see 
      <xref linkend='create_profile_item_reference'/>).
	  </para>
		<table class='requestdetails'>
			<tr><td>URL</td><td>https://{server}.amee.com/data/{category_path}/drill</td></tr>
			<tr><td>HTTP Method</td><td>GET</td></tr>
			<tr><td>Response Content-Type</td><td>application/xml or application/json</td></tr>
			<tr><td>Successful Response Code</td><td>200 OK</td></tr>
		</table>
		<section>
		  <title>Optional Parameters</title>
  		<table class='parameters'>
  			<tr>
					<th>Parameter</th>
					<th>Description</th>
  			</tr>
				<tr>
					<td>{choice_name}</td>
					<td>Any number of choices and the values chosen. See below for detailed explanation.
					  Choices must be provided in the correct order.</td>
				</tr>
  		</table>
	  </section>
		<para>
		  The response body contains a number of sections. The 'choices' section lists available drill
		  choices. The 'selections' sections shows choices that have already been made.
	  </para>
	  <section>
	    <title>First Choice</title>
	    <para>
	      The first request has no parameters, so fetches the options for the first drill choice.
      </para>
  		<section role='tabbed'>
  		  <section role='tab'>
    			<title>JSON</title>
    			<section role='httprequest'>
    			  <programlisting role='header'>
GET /data/transport/car/generic/drill HTTP/1.1
Accept: application/json
            </programlisting>
      		</section>
    			<section role='httpresponse'>
    			  <programlisting role='header'>
HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8
            </programlisting>
            <programlisting role='json-body'><xi:include href='samples/json/drill_1.js' parse="text"/></programlisting>
  		    </section>
    		</section>
  		  <section role='tab'>
    			<title>XML</title>
    			<section role='httprequest'>
    			  <programlisting role='header'>
GET /data/transport/car/generic/drill HTTP/1.1
Accept: application/xml
            </programlisting>
      		</section>
    			<section role='httpresponse'>
    			  <programlisting role='header'>
HTTP/1.1 200 OK
Content-Type: application/xml; charset=UTF-8
            </programlisting>
            <programlisting role='xml-body'><xi:include href='samples/xml/drill_1.xml' parse="text"/></programlisting>
  		    </section>
    		</section>
  		</section>
    </section>
	  <section>
	    <title>Second Choice</title>
	    <para>
	      In this example, the user has picked 'diesel' as the selection for the first choice.
	      This is passed as a URL parameter to the second request.
      </para>
  		<section role='tabbed'>
  		  <section role='tab'>
    			<title>JSON</title>
    			<section role='httprequest'>
    			  <programlisting role='header'>
GET /data/transport/car/generic/drill?fuel=diesel HTTP/1.1
Accept: application/json
            </programlisting>
      		</section>
    			<section role='httpresponse'>
    			  <programlisting role='header'>
HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8
            </programlisting>
            <programlisting role='json-body'><xi:include href='samples/json/drill_2.js' parse="text"/></programlisting>
  		    </section>
    		</section>
  		  <section role='tab'>
    			<title>XML</title>
    			<section role='httprequest'>
    			  <programlisting role='header'>
GET /data/transport/car/generic/drill?fuel=diesel HTTP/1.1
Accept: application/xml
            </programlisting>
      		</section>
    			<section role='httpresponse'>
    			  <programlisting role='header'>
HTTP/1.1 200 OK
Content-Type: application/xml; charset=UTF-8
            </programlisting>
            <programlisting role='xml-body'><xi:include href='samples/xml/drill_2.xml' parse="text"/></programlisting>
  		    </section>
    		</section>
  		</section>
    </section>
	  <section>
	    <title>Final Result</title>
	    <para>
	      This category has only two drill choices, so two selections are enough to fully identify a data item. The user 
	      has selected 'large' for the size choice in this example. The UID of the selected data item appears as a choice
	      named 'uid'. If user input is not required, and you know that you want to the large diesel car data item in your
	      application, you can use this form directly without having to do the previous two calls.
      </para>
  		<section role='tabbed'>
  		  <section role='tab'>
    			<title>JSON</title>
    			<section role='httprequest'>
    			  <programlisting role='header'>
GET /data/transport/car/generic/drill?fuel=diesel&amp;size=large HTTP/1.1
Accept: application/json
            </programlisting>
      		</section>
    			<section role='httpresponse'>
    			  <programlisting role='header'>
HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8
            </programlisting>
            <programlisting role='json-body'><xi:include href='samples/json/drill_3.js' parse="text"/></programlisting>
  		    </section>
    		</section>
  		  <section role='tab'>
    			<title>XML</title>
    			<section role='httprequest'>
    			  <programlisting role='header'>
GET /data/transport/car/generic/drill?fuel=diesel&amp;size=large HTTP/1.1
Accept: application/xml
            </programlisting>
      		</section>
    			<section role='httpresponse'>
    			  <programlisting role='header'>
HTTP/1.1 200 OK
Content-Type: application/xml; charset=UTF-8
            </programlisting>
            <programlisting role='xml-body'><xi:include href='samples/xml/drill_3.xml' parse="text"/></programlisting>
  		    </section>
    		</section>
  		</section>
    </section>
	</section>
</section>