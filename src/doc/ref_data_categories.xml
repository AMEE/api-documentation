<?xml version="1.0"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V5.0//EN" 
  "http://www.docbook.org/xml/5.0/dtd/docbook.dtd"
[
<!ENTITY % sgml.features "IGNORE">
<!ENTITY % xml.features "INCLUDE">
<!ENTITY % dbcent PUBLIC "-//OASIS//ENTITIES DocBook Character Entities V4.5//EN" "/usr/local/Cellar/docbook/5.0/docbook/xml/4.5/dbcentx.mod">
%dbcent;
<!ENTITY % translations   SYSTEM "translations.ent">
%translations;
]>

<section xml:id='data-category-reference' xmlns:xi="http://www.w3.org/2001/XInclude">
	<title><phrase role='titleize'>&categories;</phrase></title>
    <para>
		You can fetch all relevant information for a single &category; via &api_name;, or list a set of
		&categories; matching specified criteria. In &api_name; URLs and representations, &categories; are
		referred to as <emphasis>categories</emphasis>.
    </para>
	<section>
		<title>Properties</title>
		<table class='properties'>
			<tr>
				<th>Property</th>
				<th>Description</th>
				<th><link linkend='matrix-parameters'>Matrix Parameter</link></th>
			</tr>
			<tr>					
				<td>wikiName</td>
				<td>The unique name of the &category;. You should use this wherever a &category;
					needs to be specified.</td>
				<td></td>
			</tr>
			<tr>					
				<td>UID</td>
				<td>A <link linkend='uid-reference'>unique identification code</link> for the &category;.</td>
				<td></td>
			</tr>
			<tr>					
				<td>authority</td>
				<td>The <link linkend='authority'>authority rating</link> of the &category;.</td>
				<td><code>authority</code></td>
			</tr>
			<tr>					
				<td>provenance</td>
				<td>A link (or set of links) to the original source on which the &category; is based. May include WikiCreole markup for links.</td>
				<td><code>provenance</code></td>
			</tr>
			<tr>
				<td>history</td>
				<td>The <link linkend='history'>history</link> data for the &category;. A CSV-style 
					list of change dates and comments.</td>
				<td><code>history</code></td>
			</tr>
			<tr>
				<td>wikiDoc</td>
				<td>The full documentation for the &category;, as displayed in &discover;. Uses WikiCreole
					syntax.</td>
				<td><code>wikiDoc</code></td>
			</tr>
			<tr>
				<td>tags</td>
				<td>A collection of textual tags, as used by &discover;.</td>
				<td><code>tags</code></td>
			</tr>
			<tr>
				<td>itemDefinition</td>
				<td>Include details of the item definition, which provides access to information on
					&profile_item_values; and &return_values;.</td>
				<td><code>itemDefinition</code></td>
			</tr>
			<tr>					
				<td>created</td>
				<td>The time and date on which the &category; was created.</td>
				<td><code>audit</code></td>
			</tr>
			<tr>					
				<td>modified</td>
				<td>The time and date on which the &category; was last modified. Note that this
				    does not track changes to &data_items; inside the &category;, only to the &category;
				    itself.</td>
				<td><code>audit</code></td>
			</tr>
			<tr>					
				<td>status</td>
				<td>The current status of the &category;. Normally this will be <code>ACTIVE</code>.</td>
				<td><code>audit</code></td>
			</tr>
		</table>
	</section>
	<section xml:id='list-data-categories-reference'>
		<title>List &categories;</title>
		<para>
			Fetches a list of &categories; matching specified criteria. The list is sorted by relevance, or by
			wikiName if no query parameters are supplied.
		</para>
		<table class='requestdetails'>
			<tr><td>URL</td>
			    <td><code>&api_url;/&api_version;/categories[;{matrix_parameters}]?{query_parameters}</code></td></tr>
			<tr><td>HTTP Method</td><td><code>GET</code></td></tr>
			<tr><td>Successful Response Code</td><td><code>200 OK</code></td></tr>
		</table>
		<section>
		  <title>Optional Query Parameters</title>
		    <para>
				The &category; list resource provides a number of parameters for searching. These
				can be specified as simple strings, in which case an exact match is required, or as 
				more complex lucene query expressions. See <xref linkend='search'/> for more details.
			</para>
  			<table class='parameters'>
  			<tr>
				<th>Query Parameter</th>
				<th>Description</th>
  			</tr>
			<tr>
				<td><code>wikiName</code></td>
				<td>Match results by wikiName.</td>
			</tr>
			<tr>
				<td><code>wikiDoc</code></td>
				<td>Match results by wikiDoc. Normally you'll want to use a substring search here.</td>
			</tr>
			<tr>
				<td><code>provenance</code></td>
				<td>Match results by provenance; standards body name, for instance.</td>
			</tr>
			<tr>
				<td><code>authority</code></td>
				<td>Match results by authority; Valid values are <code>enterprise</code>, <code>recommended</code>, <code>verified</code>, or <code>unverified</code>.</td>
			</tr>
			<tr>
				<td><code>itemDefinitionUid</code></td>
				<td>List &categories; that use the specified item definition (by UID).</td>
			</tr>
			<tr>
				<td><code>itemDefinitionName</code></td>
				<td>List &categories; that use the specified item definition (by name).</td>
			</tr>
			<tr>
				<td><code>tags</code></td>
				<td>A comma-separated list of tags that returned &categories; should have.
					Can also be a lucene query expression.</td>
			</tr>
			<tr>
				<td><code>excTags</code></td>
				<td>A comma-separated list of tags that returned &categories; should 
					<emphasis>not</emphasis> have. Can also be a lucene query expression.</td>
			</tr>
			<tr>					
				<td><code>resultStart</code></td>
				<td>Zero-based index of the first result that should be returned. See 
					<xref linkend='paging'/>. Defaults to 0 if not specified.</td>
			</tr>
			<tr>					
				<td><code>resultLimit</code></td>
				<td>Specifies the number of results to return in a single page. See 
					<xref linkend='paging'/>. Defaults to 50 if not specified..</td>
			</tr>
  		</table>
	  </section>
		<para>
		  The response contains a JSON or XML encoded description of &categories; that match the query criteria.
  	    </para>
        <xi:include href="samples/get_3_categories_tags=electricity_resultLimit=10.xml"/>
	</section>
	<section xml:id='get-data-category-reference'>
		<title>Get a single &category;</title>
		<para>
			Fetch information about a particular &category;.
		</para>
		<table class='requestdetails'>
			<tr><td>URL</td><td><code>&api_url;/&api_version;/categories/{wikiName}[;{matrix_parameters}]</code></td></tr>
			<tr><td>HTTP Method</td><td><code>GET</code></td></tr>
			<tr><td>Successful Response Code</td><td><code>200 OK</code></td></tr>
		</table>
		<para>
		  The response contains a JSON or XML encoded description of the &category; as shown below.
  	    </para>
        <xi:include href="samples/get_3_categories_DEFRA_transport_fuel_methodology.xml"/>
	</section>
	<section id='drilldown-reference'>
		<title>Interactive selection of &data_items;</title>
    <para>
      Each &category; contains a number of &data_items;. Normally you will know which &data_item; you want
	  to use, but sometimes you will want to give that choice to your users. This is particularly important 
      for large categories, such as 
	  <ulink url='http://discover.amee.com/categories/US_specific_car_transport'>US specific car
	  transport</ulink>, which contains many thousands of &data_items;.
    </para>
    <para>
	  Each &category; has a
	  <glossterm>drilldown</glossterm> resource which allows you do this kind of user-driven &data_item;
	  selection. 
      Each call to the drilldown resource will return a list of choices. You can then select one of
      these and provide it as a parameter to a subsequent drilldown request. When the sequence of choices
      uniquely identifies a &data_item;, a single choice named 'uid' is returned. 
    </para>
	<para>
	  This UID can be used
	  to identify the &data_item; in place of the usual &drill_options; when performing calculations or
	  storing data. These UIDs are not the same across different &api_name; platforms, and so should not 
	  be hardcoded into applications. They can, however, be cached safely for prolonged periods.
  	</para>
		<table class='requestdetails'>
			<tr><td>URL</td><td><code>&api_url;/&api_version;/categories/{wikiName}/drill[?{&drill_options;}]</code></td></tr>
			<tr><td>HTTP Method</td><td><code>GET</code></td></tr>
			<tr><td>Response Content-Type</td><td><code>application/xml</code> or <code>application/json</code></td></tr>
			<tr><td>Successful Response Code</td><td><code>200 OK</code></td></tr>
		</table>
		<section>
		  <title>Optional Parameters</title>
  		<table class='parameters'>
  			<tr>
					<th>Parameter</th>
					<th>Description</th>
  			</tr>
				<tr>
					<td>{&drill_options;}</td>
					<td>Any number of choices and the values chosen. See below for detailed explanation.
					  Choices should be provided in the correct order.</td>
				</tr>
  		</table>
	  </section>
		<para>
		  The response body contains a number of sections. <code>name</code> is the name of the next
		  &drill_option;, and <code>choices</code> lists the valid values for it. The <code>selections</code>
		  list shows &drill_options; that have already been chosen.
	  </para>
	  <section>
	    <title>First Choice</title>
	    <para>
	      The first request has no parameters, so fetches the choices for the first &drill_option;.
      </para>
      <xi:include href="samples/get_3_categories_Generic_car_transport_drill.xml"/>
    </section>
	  <section>
	    <title>Second Choice</title>
	    <para>
	      In this example, the user has picked 'diesel' for the first &drill_option;.
	      This is passed as a query parameter to a second drilldown request.
      </para>
      <xi:include href="samples/get_3_categories_Generic_car_transport_drill_fuel=diesel.xml"/>
    </section>
	  <section>
	    <title>Final Result</title>
	    <para>
	      This &category; has only two &drill_options;, so two drilldown selections are enough to fully
		  identify a &data_item;. The user has selected <code>size=large</code> in this example. 
		  The UID of the selected &data_item; appears as a choice named 'uid'.
      </para>
      <xi:include href="samples/get_3_categories_Generic_car_transport_drill_fuel=diesel_size=large.xml"/>
    </section>
	</section>
</section>