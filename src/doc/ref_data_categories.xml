<?xml version="1.0"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V5.0//EN" 
  "http://www.docbook.org/xml/5.0/dtd/docbook.dtd"
[
<!ENTITY % sgml.features "IGNORE">
<!ENTITY % xml.features "INCLUDE">
<!ENTITY % dbcent PUBLIC "-//OASIS//ENTITIES DocBook Character Entities V4.5//EN" "/usr/local/Cellar/docbook/5.0/docbook/xml/4.5/dbcentx.mod">
%dbcent;
<!ENTITY % translations   SYSTEM "translations.xml">
%translations;
]>

<section xml:id='data-category-reference' xmlns:xi="http://www.w3.org/2001/XInclude">
	<title>&categories;</title>
    <para>
		You can fetch all relevant information for a single &category; via &api_name;, or list a set of
		&categories; matching specified criteria. In &api_name; URLs and representations, &models; are referred 
		to as 'categories' for historical reasons.
    </para>
	<section>
		<title>Properties</title>
		<table class='properties'>
			<tr>
				<th>Property</th>
				<th>Description</th>
				<th><link linkend='matrix-parameters'>Matrix Parameter</link></th>
			</tr>
			<tr>					
				<td>wikiName</td>
				<td>The unique name of the &category;. You should use this wherever a &category;
					needs to be specified.</td>
				<td></td>
			</tr>
			<tr>					
				<td>UID</td>
				<td>A <link linkend='uid-reference'>unique identification code</link> for the &category;.</td>
				<td></td>
			</tr>
			<tr>					
				<td>authority</td>
				<td>The <link linkend='authority'>authority rating</link> of the &category;.</td>
				<td>authority</td>
			</tr>
			<tr>					
				<td>provenance</td>
				<td>A link (or set of links) to the original source on which the &category; is based. May include WikiCreole markup for links.</td>
				<td>provenance</td>
			</tr>
			<tr>
				<td>history</td>
				<td>The <link linkend='history'>history</link> data for the &category;. A CSV-style 
					list of change dates and comments.</td>
				<td>history</td>
			</tr>
			<tr>
				<td>wikiDoc</td>
				<td>The full documentation for the &category;, as displayed in &discover;. Uses WikiCreole
					syntax.</td>
				<td>wikiDoc</td>
			</tr>
			<tr>
				<td>tags</td>
				<td>A collection of textual tags, as used by &discover;.</td>
				<td>tags</td>
			</tr>
			<tr>
				<td>itemDefinition</td>
				<td>Include details of the item definition, which provides access to information on
					&profile_item_values; and &return_values;.</td>
				<td>itemDefinition</td>
			</tr>
			<tr>					
				<td>created</td>
				<td>The time and date on which the &category; was created.</td>
				<td>audit</td>
			</tr>
			<tr>					
				<td>modified</td>
				<td>The time and date on which the &category; was last modified. Note that this
				    does not track changes to &data_items; inside the &category;, only to the &category;
				    itself.</td>
				<td>audit</td>
			</tr>
			<tr>					
				<td>status</td>
				<td>The current status of the &category;. Normally this will be <code>ACTIVE</code>.</td>
				<td>audit</td>
			</tr>
		</table>
	</section>
	<section xml:id='list-data-categories-reference'>
		<title>List &categories;</title>
		<para>
			Fetches a list of &categories; matching specified criteria. The list is sorted by relevance, or by
			wikiName if no query parameters are supplied.
		</para>
		<table class='requestdetails'>
			<tr><td>URL</td>
			    <td>https://{server}.amee.com/3/categories[;{matrix_parameters}]?{query_parameters}</td></tr>
			<tr><td>HTTP Method</td><td>GET</td></tr>
			<tr><td>Response Content-Type</td><td>application/xml or application/json</td></tr>
			<tr><td>Successful Response Code</td><td>200 OK</td></tr>
		</table>
		<section>
		  <title>Optional Query Parameters</title>
		    <para>
				The &category; list resource provides a number of parameters for searching. These
				can be specified as simple strings, in which case an exact match is required, or as 
				more complex lucene query expressions. See <xref linkend='search'/> for more details.
			</para>
  			<table class='parameters'>
  			<tr>
				<th>Query Parameter</th>
				<th>Description</th>
  			</tr>
			<tr>
				<td>wikiName</td>
				<td>Match results by wikiName.</td>
			</tr>
			<tr>
				<td>wikiDoc</td>
				<td>Match results by wikiDoc. Normally you'll want to use a substring search here.</td>
			</tr>
			<tr>
				<td>provenance</td>
				<td>Match results by provenance; standards body name, for instance.</td>
			</tr>
			<tr>
				<td>authority</td>
				<td>Match results by authority; Valid values are 'enterprise', 'recommended', 'verified', 
					or 'unverified'.</td>
			</tr>
			<tr>
				<td>itemDefinitionUid</td>
				<td>List &categories; that use the specified item definition (by UID).</td>
			</tr>
			<tr>
				<td>itemDefinitionName</td>
				<td>List &categories; that use the specified item definition (by name).</td>
			</tr>
			<tr>
				<td>tags</td>
				<td>A comma-separated list of tags that returned &categories; should have.
					Can also be a lucene query expression.</td>
			</tr>
			<tr>
				<td>excTags</td>
				<td>A comma-separated list of tags that returned &categories; should 
					<emphasis>not</emphasis> have. Can also be a lucene query expression.</td>
			</tr>
			<tr>					
				<td>resultStart</td>
				<td>Zero-based index of the first result that should be returned. See 
					<xref linkend='paging'/>. Defaults to 0 if not specified.</td>
			</tr>
			<tr>					
				<td>resultLimit</td>
				<td>Specifies the number of results to return in a single page. See 
					<xref linkend='paging'/>. Defaults to 50 if not specified..</td>
			</tr>
  		</table>
	  </section>
		<para>
		  The response contains a JSON or XML encoded description of &categories; that match the query creiteria.
  	    </para>
        <xi:include href="samples/get_3_categories_tags=electricity_resultLimit=10.xml"/>
	</section>
	<section xml:id='get-data-category-reference'>
		<title>Get a single &category;</title>
		<para>
			Fetch information about a particular &category;.
		</para>
		<table class='requestdetails'>
			<tr><td>URL</td><td>https://{server}.amee.com/3/categories/{wikiName}[;{matrix_parameters}]</td></tr>
			<tr><td>HTTP Method</td><td>GET</td></tr>
			<tr><td>Response Content-Type</td><td>application/xml or application/json</td></tr>
			<tr><td>Successful Response Code</td><td>200 OK</td></tr>
		</table>
		<para>
		  The response contains a JSON or XML encoded description of the &category; as shown below.
  	    </para>
        <xi:include href="samples/get_3_categories_DEFRA_transport_fuel_methodology.xml"/>
	</section>
	<section id='drilldown-reference'>
		<title>Look up a Data Item UID</title>
    <para>
      Drilldowns are a special resource available within every Data Category that contains Data Items.
    </para>
    <para>
      As data items are identified by UIDs in &api_name; calls such as creating Profile Items, a way is 
      required of translating human-readable choices into these UIDs. This is particularly important 
      for large categories, such as UK car models, which can contain many thousands of data items.
    </para>
    <para>
      Data item UIDs may be different on different AMEE platforms for the same item. Because of
      this, data item UIDs should never be hardcoded into client apps. Instead, you should use the 
      drilldown URL (which doesn't change) to obtain the UIDs, which can then be cached. 
      Drilldown URLs may be safely hardcoded, so that you don't necessarily have to iterate through
      the choices each time if you already know which item you want to get to.
    </para>
		<para>
      Each call to the resource will give a list of choices. The client can then select one of
      these and provide it as a parameter to the next drilldown call. When the sequence of choices
      uniquely identifies one data item, a single choice named 'uid' is returned. This is the UID 
      that should be used to refer to the chosen Data Item when creating Profile Items (see 
      <xref linkend='create-profile-item-reference'/>).
	  </para>
		<table class='requestdetails'>
			<tr><td>URL</td><td>https://{server}.amee.com/data/{category_path}/drill</td></tr>
			<tr><td>HTTP Method</td><td>GET</td></tr>
			<tr><td>Response Content-Type</td><td>application/xml or application/json</td></tr>
			<tr><td>Successful Response Code</td><td>200 OK</td></tr>
		</table>
		<section>
		  <title>Optional Parameters</title>
  		<table class='parameters'>
  			<tr>
					<th>Parameter</th>
					<th>Description</th>
  			</tr>
				<tr>
					<td>{choice_name}</td>
					<td>Any number of choices and the values chosen. See below for detailed explanation.
					  Choices must be provided in the correct order.</td>
				</tr>
  		</table>
	  </section>
		<para>
		  The response body contains a number of sections. The 'choices' section lists available drill
		  choices. The 'selections' sections shows choices that have already been made.
	  </para>
	  <section>
	    <title>First Choice</title>
	    <para>
	      The first request has no parameters, so fetches the options for the first drill choice.
      </para>
      <xi:include href="samples/get_3_categories_Generic_car_transport_drill.xml"/>
    </section>
	  <section>
	    <title>Second Choice</title>
	    <para>
	      In this example, the user has picked 'diesel' as the selection for the first choice.
	      This is passed as a URL parameter to the second request.
      </para>
      <xi:include href="samples/get_3_categories_Generic_car_transport_drill_fuel=diesel.xml"/>
    </section>
	  <section>
	    <title>Final Result</title>
	    <para>
	      This category has only two drill choices, so two selections are enough to fully identify a data item. The user 
	      has selected 'large' for the size choice in this example. The UID of the selected data item appears as a choice
	      named 'uid'.
      </para>
      <para>
        If you know beforehand the sequence of drill choices you will wish to make, it is not necessary to go through
        the process of requesting each step of the drill process. That is, while we recommend strongly against
        hard-coding Data Item UIDs in your application, it is perfectly sensible to code a fully specified Drill
        request to look up the data UID in your application’s initialisation.
      </para>
      <xi:include href="samples/get_3_categories_Generic_car_transport_drill_fuel=diesel_size=large.xml"/>
    </section>
	</section>
</section>